// Autogenerated from Pigeon (v22.7.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol StoreKitIosApi {
  /// 是否有资格获得推介促销优惠(新用户)
  func eligibleForIntroOffer(productId: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// 获取指定商品信息
  /// @return Data
  func getProduct(productId: String, completion: @escaping (Result<Void, Error>) -> Void)
  /// 关闭订单
  func finish(transactionId: Int64, completion: @escaping (Result<Void, Error>) -> Void)
  func vendorId(completion: @escaping (Result<String, Error>) -> Void)
  func purchase(arguments: [String: Any?], completion: @escaping (Result<Void, Error>) -> Void)
  /// 当前的权益序列会发出用户拥有权益的每个产品的最新交易，具体包括：
  /// - 每个非消耗性应用内购买的交易
  /// - 每个自动续订订阅的最新交易，其Product.SubscriptionInfo.RenewalState状态为subscribed或inGracePeriod
  /// - 每个非续订订阅的最新交易，包括已完成的订阅
  /// - App Store退款或撤销的产品不会出现在当前的权益中。消耗性应用内购买也不会出现在当前的权益中。
  /// Important: 要获取未完成的消耗性产品的交易，请使用Transaction中的unfinished或all序列。
  func current(completion: @escaping (Result<Void, Error>) -> Void)
  /// 当前的权益序列，例如询问购买交易、订阅优惠码兑换以及客户在App Store中进行的购买。
  /// 它还会发出在另一台设备上完成的客户端在您的应用程序中的交易。
  /// 每当用户购买或恢复购买产品时，都会触发此序列。
  /// 监听此序列， 每接受到一个交易更新，都会回调 [StoreKitIapCallback.updates]。
  /// 通过调用 [cancelUpdates] 取消监听。
  func updates(completion: @escaping (Result<Void, Error>) -> Void)
  /// 取消监听更新
  func cancelUpdates(completion: @escaping (Result<Void, Error>) -> Void)
  /// 需要处理的交易。未处理的交易会在启动时的 updates 中返回
  func unfinished(completion: @escaping (Result<Void, Error>) -> Void)
  /// 交易历史记录包括应用程序尚未通过调用finish()完成的可消耗应用内购买。
  /// 它不包括已完成的可消耗产品或已完成的非续订订阅，重新购买的非消耗性产品或订阅，或已恢复的购买。
  func all(completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class StoreKitIosApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `StoreKitIosApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: StoreKitIosApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    /// 是否有资格获得推介促销优惠(新用户)
    let eligibleForIntroOfferChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.eligibleForIntroOffer\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      eligibleForIntroOfferChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let productIdArg = args[0] as! String
        api.eligibleForIntroOffer(productId: productIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      eligibleForIntroOfferChannel.setMessageHandler(nil)
    }
    /// 获取指定商品信息
    /// @return Data
    let getProductChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.getProduct\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getProductChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let productIdArg = args[0] as! String
        api.getProduct(productId: productIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getProductChannel.setMessageHandler(nil)
    }
    /// 关闭订单
    let finishChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.finish\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      finishChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let transactionIdArg = args[0] as! Int64
        api.finish(transactionId: transactionIdArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      finishChannel.setMessageHandler(nil)
    }
    let vendorIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.vendorId\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      vendorIdChannel.setMessageHandler { _, reply in
        api.vendorId { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      vendorIdChannel.setMessageHandler(nil)
    }
    let purchaseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.purchase\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      purchaseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let argumentsArg = args[0] as! [String: Any?]
        api.purchase(arguments: argumentsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      purchaseChannel.setMessageHandler(nil)
    }
    /// 当前的权益序列会发出用户拥有权益的每个产品的最新交易，具体包括：
    /// - 每个非消耗性应用内购买的交易
    /// - 每个自动续订订阅的最新交易，其Product.SubscriptionInfo.RenewalState状态为subscribed或inGracePeriod
    /// - 每个非续订订阅的最新交易，包括已完成的订阅
    /// - App Store退款或撤销的产品不会出现在当前的权益中。消耗性应用内购买也不会出现在当前的权益中。
    /// Important: 要获取未完成的消耗性产品的交易，请使用Transaction中的unfinished或all序列。
    let currentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.current\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      currentChannel.setMessageHandler { _, reply in
        api.current { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      currentChannel.setMessageHandler(nil)
    }
    /// 当前的权益序列，例如询问购买交易、订阅优惠码兑换以及客户在App Store中进行的购买。
    /// 它还会发出在另一台设备上完成的客户端在您的应用程序中的交易。
    /// 每当用户购买或恢复购买产品时，都会触发此序列。
    /// 监听此序列， 每接受到一个交易更新，都会回调 [StoreKitIapCallback.updates]。
    /// 通过调用 [cancelUpdates] 取消监听。
    let updatesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.updates\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updatesChannel.setMessageHandler { _, reply in
        api.updates { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      updatesChannel.setMessageHandler(nil)
    }
    /// 取消监听更新
    let cancelUpdatesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.cancelUpdates\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      cancelUpdatesChannel.setMessageHandler { _, reply in
        api.cancelUpdates { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      cancelUpdatesChannel.setMessageHandler(nil)
    }
    /// 需要处理的交易。未处理的交易会在启动时的 updates 中返回
    let unfinishedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.unfinished\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unfinishedChannel.setMessageHandler { _, reply in
        api.unfinished { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      unfinishedChannel.setMessageHandler(nil)
    }
    /// 交易历史记录包括应用程序尚未通过调用finish()完成的可消耗应用内购买。
    /// 它不包括已完成的可消耗产品或已完成的非续订订阅，重新购买的非消耗性产品或订阅，或已恢复的购买。
    let allChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.store_kit_iap.StoreKitIosApi.all\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      allChannel.setMessageHandler { _, reply in
        api.all { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      allChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol StoreKitFlutterApiProtocol {
  func onPurchased(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUpdates(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCurrent(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onUnfinished(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onAll(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void)
  /// 是否有资格获得推介促销优惠回调
  func onIntroOffer(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onProduct(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class StoreKitFlutterApi: StoreKitFlutterApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: MessagesPigeonCodec {
    return MessagesPigeonCodec.shared
  }
  func onPurchased(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.store_kit_iap.StoreKitFlutterApi.onPurchased\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onUpdates(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.store_kit_iap.StoreKitFlutterApi.onUpdates\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onCurrent(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.store_kit_iap.StoreKitFlutterApi.onCurrent\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onUnfinished(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.store_kit_iap.StoreKitFlutterApi.onUnfinished\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onAll(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.store_kit_iap.StoreKitFlutterApi.onAll\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  /// 是否有资格获得推介促销优惠回调
  func onIntroOffer(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.store_kit_iap.StoreKitFlutterApi.onIntroOffer\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onProduct(data dataArg: [String: Any?], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.store_kit_iap.StoreKitFlutterApi.onProduct\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([dataArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
