// Mocks generated by Mockito 5.4.5 from annotations
// in store_kit_iap/test/store_kit_iap_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;
import 'dart:typed_data' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:store_kit_iap/core/data.dart' as _i6;
import 'package:store_kit_iap/core/iap_flutter_api.dart' as _i5;
import 'package:store_kit_iap/core/messages.g.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamController_0<T> extends _i1.SmartFake
    implements _i2.StreamController<T> {
  _FakeStreamController_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [StoreKitIosApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreKitIosApi extends _i1.Mock implements _i3.StoreKitIosApi {
  MockStoreKitIosApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get pigeonVar_messageChannelSuffix => (super.noSuchMethod(
        Invocation.getter(#pigeonVar_messageChannelSuffix),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#pigeonVar_messageChannelSuffix),
        ),
      ) as String);

  @override
  _i2.Future<void> eligibleForIntroOffer(String? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #eligibleForIntroOffer,
          [productId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> getProduct(String? productId) => (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [productId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> finish(int? transactionId) => (super.noSuchMethod(
        Invocation.method(
          #finish,
          [transactionId],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<String> vendorId() => (super.noSuchMethod(
        Invocation.method(
          #vendorId,
          [],
        ),
        returnValue: _i2.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #vendorId,
            [],
          ),
        )),
      ) as _i2.Future<String>);

  @override
  _i2.Future<void> purchase(Map<String, Object?>? arguments) =>
      (super.noSuchMethod(
        Invocation.method(
          #purchase,
          [arguments],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> current() => (super.noSuchMethod(
        Invocation.method(
          #current,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> updates() => (super.noSuchMethod(
        Invocation.method(
          #updates,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> cancelUpdates() => (super.noSuchMethod(
        Invocation.method(
          #cancelUpdates,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> unfinished() => (super.noSuchMethod(
        Invocation.method(
          #unfinished,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);

  @override
  _i2.Future<void> all() => (super.noSuchMethod(
        Invocation.method(
          #all,
          [],
        ),
        returnValue: _i2.Future<void>.value(),
        returnValueForMissingStub: _i2.Future<void>.value(),
      ) as _i2.Future<void>);
}

/// A class which mocks [StoreKitFlutterApiImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreKitFlutterApiImpl extends _i1.Mock
    implements _i5.StoreKitFlutterApiImpl {
  MockStoreKitFlutterApiImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.StreamController<List<_i6.Transaction>> get allTransactionController =>
      (super.noSuchMethod(
        Invocation.getter(#allTransactionController),
        returnValue: _FakeStreamController_0<List<_i6.Transaction>>(
          this,
          Invocation.getter(#allTransactionController),
        ),
      ) as _i2.StreamController<List<_i6.Transaction>>);

  @override
  _i2.StreamController<List<_i6.Transaction>>
      get currentTransactionController => (super.noSuchMethod(
            Invocation.getter(#currentTransactionController),
            returnValue: _FakeStreamController_0<List<_i6.Transaction>>(
              this,
              Invocation.getter(#currentTransactionController),
            ),
          ) as _i2.StreamController<List<_i6.Transaction>>);

  @override
  _i2.StreamController<List<_i6.Transaction>>
      get unfinishedTransactionController => (super.noSuchMethod(
            Invocation.getter(#unfinishedTransactionController),
            returnValue: _FakeStreamController_0<List<_i6.Transaction>>(
              this,
              Invocation.getter(#unfinishedTransactionController),
            ),
          ) as _i2.StreamController<List<_i6.Transaction>>);

  @override
  _i2.StreamController<bool> get introOfferTransactionController =>
      (super.noSuchMethod(
        Invocation.getter(#introOfferTransactionController),
        returnValue: _FakeStreamController_0<bool>(
          this,
          Invocation.getter(#introOfferTransactionController),
        ),
      ) as _i2.StreamController<bool>);

  @override
  _i2.StreamController<_i7.Uint8List> get productTransactionController =>
      (super.noSuchMethod(
        Invocation.getter(#productTransactionController),
        returnValue: _FakeStreamController_0<_i7.Uint8List>(
          this,
          Invocation.getter(#productTransactionController),
        ),
      ) as _i2.StreamController<_i7.Uint8List>);

  @override
  _i2.StreamController<_i6.Transaction> get purchasedTransactionController =>
      (super.noSuchMethod(
        Invocation.getter(#purchasedTransactionController),
        returnValue: _FakeStreamController_0<_i6.Transaction>(
          this,
          Invocation.getter(#purchasedTransactionController),
        ),
      ) as _i2.StreamController<_i6.Transaction>);

  @override
  _i2.StreamController<_i6.Transaction> get updateTransactionController =>
      (super.noSuchMethod(
        Invocation.getter(#updateTransactionController),
        returnValue: _FakeStreamController_0<_i6.Transaction>(
          this,
          Invocation.getter(#updateTransactionController),
        ),
      ) as _i2.StreamController<_i6.Transaction>);

  @override
  void onAll(Map<String, Object?>? data) => super.noSuchMethod(
        Invocation.method(
          #onAll,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onCurrent(Map<String, Object?>? data) => super.noSuchMethod(
        Invocation.method(
          #onCurrent,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onUnfinished(Map<String, Object?>? data) => super.noSuchMethod(
        Invocation.method(
          #onUnfinished,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onIntroOffer(Map<String, Object?>? data) => super.noSuchMethod(
        Invocation.method(
          #onIntroOffer,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onProduct(Map<String, Object?>? data) => super.noSuchMethod(
        Invocation.method(
          #onProduct,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onPurchased(Map<String, Object?>? data) => super.noSuchMethod(
        Invocation.method(
          #onPurchased,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onUpdates(Map<String, Object?>? data) => super.noSuchMethod(
        Invocation.method(
          #onUpdates,
          [data],
        ),
        returnValueForMissingStub: null,
      );
}
